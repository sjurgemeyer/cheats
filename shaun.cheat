% shaun

# test cheat [st] {arg1 arg2}
echo "it worked <arg1>"
echo "2nd arg worked <arg2>"

% git

# Force push current branch to master [gfo] {current_branch}
git push -f origin <current_branch>

$ current_branch: git branch --show-current
# Add a remote based on current origin for a different user
new_remote=`git remote -v | grep -m 1 origin | sed -En 's/origin[\s]*(.*\.git).*$/\1/p' | sed -En 's/^[[:space:]]*(.*)'"$git_username"'(.*)/\1'"<remote_user>"'\2/p'`
git remote add <remote_name> $new_remote
echo Added remote <remote_name> for $new_remote

$ remote_user: echo ""
$ remote_name: echo "<remote_user>"

# clone with origin and upstream
project=`echo <git_url> | sed -En 's/.*\/(.*).git$/\1/p'`
base=`echo <git_url> | sed -En 's/(.*):.*.git$/\1/p'`
git clone <git_url>
cd $project
git remote rename origin upstream
git remote add origin $base:$git_username/$project.git
cd -

# recent branches [branches]
git for-each-ref --sort=-committerdate refs/heads/ --format='%(HEAD) %(color:yellow)%(refname:short)%(color:reset) - %(color:red)%(objectname:short)%(color:reset) - %(contents:subject) - %(authorname) (%(color:green)%(committerdate:relative)%(color:reset))'

# Move to main and update to latest from upstream [gum]
if [[ `git status --porcelain` ]]; then
    echo "Changes exist to current branch, exiting"
else
    git checkout main
    git fetch upstream
    git pull upstream main
fi

# Hard reset to upstream main
git reset --hard
git fetch upstream
git pull upstream main

# Stash, update master, and pop
git stash -u
git reset --hard
git fetch upstream
git pull upstream main
git pop

# Create clean branch from main [branch] {branch_name}
git checkout main
git checkout -b <branch_name>

# Rename remote
git remote rename <old_name> <new_name>

$ old_name: echo "origin upstream" | tr ' ' '\n'
$ new_name: echo "upstream origin" | tr ' ' '\n'

# Rename branch
git branch -m <new_name>

# Delete and recreate an branch [gdb] {branch}
git d <branch>
git b <branch>

# List authors for a repo
git ls-tree --name-only -r HEAD | grep -E $1 | xargs -n1 git blame --line-porcelain | grep "^author "|sort|uniq -c|sort -nr


# List changes between two provided revisions
git log --no-merges --format="%s" <rev1>...<rev2>

# List changes since a revision
git fetch upstream

$ rev1: git log --oneline --- --fzf-overrides --no-sort --map "sed -En 's/ .*//p'"
$ rev2: git log --oneline --- --fzf-overrides --no-sort --map "sed -En 's/ .*//p'"

# find-in-file match in file with navigation [fif] {search_term}
rg --files-with-matches --no-messages "<search_term>" | fzf --preview "highlight -O ansi -l {} 2> /dev/null | rg --colors 'match:bg:yellow' --ignore-case --pretty --context 10 '<search_term>' || rg --ignore-case --pretty --context 10 '<search_term>' {}"


# Delete all branches that have been merged to master [cleanBranches]
git branch --merged | grep -v "main|master|release|\*" | grep -v "\*" | xargs -n 1 git branch -d
echo "=============="
git branch -vv

# Interactive cleanup of local and remote branches [cleanAllBranches]
git remote prune origin
git remote prune upstream
git checkout main
git branch --merged | grep -v "main||master|release|\*" | grep -v "\*" | xargs -n 1 git branch -d
for i in `git -c color.status=false branch -a | sed 's/.* //' | egrep -v ".*HEAD.*|.*upstream/.*"`; do
    echo -e "\nDelete branch $i? (Y)es/(n)o/(c)ancel"
    read foo
    if [ "$foo" = "Y" ]; then
        echo -e "\n"
        if [[ "$i" =~ remotes/origin.* ]]; then
            export BRANCHNAME=`echo "$i" | sed 's/remotes\/origin\/\(.*$\)/\1/'`
            # Delete branch on origin
            git push origin :$BRANCHNAME
        else
            # Delete local branch
            git branch -D $i
        fi
    else
        if [ "$confirm" = "c" ]; then
            echo -e "\nCancelling delete branch script"
            exit 0
        fi
    fi
done
echo -e "\n"
echo "Cleanup complete"
git branch -a


% vim

# Generate ctags
repo_root=`git rev-parse --show-toplevel || pwd`

pushd $repo_root >> /dev/null

echo "Processing $repo_root..."

ctags -R

if [ -e .ctags-projects ]; then
    for project in `cat .ctags-projects`; do
        echo "Processing $HOME/$project..."
        ctags -R -a $HOME/$project
    done
fi
popd >> /dev/null

echo "Done."

% gradle

# Run test [gt] {project test}
echo "./gradlew -p <project> test --tests <test>"
./gradlew -p <project> test --tests <test>
$ project: fd "build.gradle|gradle.kts" | sed 's,/[^/]*$,/,'
$ test: fd 'Test|Spec' <project> | sed s,.*src/test/,,g | sed s,/,.,g | sed s,.kt,, | sed s,.groovy,,

# Open test results [results]
open <testresults>
$ testresults: fd -p test/index.html

% tail

# Tail as format [tailas] {file format}
tail -f <file> | bat --paging=never -l $2

# Tail as json [tailj] {file}
tail -f <file> | bat --paging=never -l json

# Tail as json [taill] {file}
tail -f <file> | bat --paging=never -l log

# Tail as json [tailc] {file}
tail -f <file> | bat --paging=never -l csv


% docker

# stop all running docker containers [dsa]
docker stop $(docker ps -a -q)

# bring up the containers in ./docker-compose.yml [dcu]
docker-compose up -d

# delete all containers, all containers must be stopped or an error will occur [dda]
docker rm $(docker ps -a -q)

# stop all running containers, then bring up the containers in ./docker-compose.yml [dra]
docker stop $(docker ps -a -q)
docker-compose up -d

# stop all containers, delete all containers, then bring up the containers in ./docker-compose.yml
docker stop $(docker ps -a -q)
docker rm $(docker ps -a -q)
docker-compose up -d


% java

# print classes in jar [printClassesInJar]
jar tf $1 | grep .class | grep -v '\$' | grep -v 'package-info' | sed s,/,.,g | sed s/.class//g


% iterm

# reset tab color [resettab]
echo -ne "\033]6;1;bg;*;default\a"

# set tab color [tabcolor]
resettab
echo -ne "\033]6;1;bg;<tabcolor>;brightness;255\a"

# set tab title [tabtitle]
echo -ne "\e]1;$1\a"

# search for process [p]
ps -el | fzf

% compression

# Untar a gzip'ed file
tar -xzvf <GzipTarFile>

# Untar a bzip'ed file
tar -xjvf <BzipTarFile>

# Tar and zip a file or directory (recursively)
tar -czvf <ArchiveName> <FileOrDirectory>


tar cf <name>.tar <files>

# Extract the files from a tar
tar xf <tar_file>

# Create a tar with Gzip compression
tar czf <name>.tar.gz <files>

# Extract a tar using Gzip
tar xzf <targz_file>

# Compress file and appends .gz to its name
gzip <path>

# Decompress compressed file
gzip -d <gz_file>

$ path: ls
$ tar_file: ls *.tar
$ targz_file: ls *.tar.gz
$ gz_file: ls *.gz
